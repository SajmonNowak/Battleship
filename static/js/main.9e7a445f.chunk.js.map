{"version":3,"sources":["factories/GameboardFactory.js","factories/Player.js","Data/shipTypes.js","helper/createNearbyCoordinates.js","helper/isNearbyField.js","helper/isValidPosition.js","factories/ShipFactory.js","helper/createRandomShips.js","Controller.js","helper/aiTurn.js","helper/nextTurn.js","helper/playerTurn.js","components/style/CellContainer.js","imgs/flame.png","components/Cell.js","components/style/ScoreBoard.js","components/Gameboard.js","components/style/GameContainer.js","components/style/GameoverModal.js","components/GameoverWindow.js","components/style/ShipSelectionUI.js","components/SelectionCell.js","components/ShipCell.js","components/Ship.js","components/DNDProvider.js","components/style/InfoContainer.js","imgs/light-bulb.png","components/SelectionInfo.js","components/ShipSelectionWindow.js","components/style/Console.js","components/GameWindow.js","components/style/HeaderContainer.js","components/Header.js","components/style/AppContainer.js","App.js","components/style/GlobalStyle.js","index.js"],"names":["GameboardFactory","ships","board","shipsOnBoard","placeShips","shipArray","forEach","ship","placeShip","getPosition","coordinate","hasShip","push","newBoard","i","isHitted","init","shipCount","length","shipsDestroyed","getShips","getBoard","getField","receiveAttack","hit","isSunk","checkIfAllDestroyed","replaceShip","newPos","find","e","getId","pos","setPosition","getShipCount","Player","playerType","shipSelection","type","score","playerGameboard","attack","increaseScore","getScore","getGameboard","getType","shipTypes","name","amount","createNearbyCoordinates","getRevTop","getRevLeft","getRevBottom","getRevRight","isTop","isLeft","isBot","isRight","nearbyCoordinates","cellType","includes","filter","finalArray","isNearbyField","array","getNearbyCoordinates","undefined","doubleNearby","index","indexOf","concat","hasShipOnPosition","some","coord","inBreak","alignment","x","parseInt","onNearbyField","isValidPosition","controlBoard","ShipFactory","shipLength","_id","shipName","position","hitted","id","field","every","getHits","coordinatesArray","getName","setNearbyCoordinates","coordinates","getLength","rotate","fixedPos","map","this","getAlignment","createRandomPos","randomNumber","Math","floor","random","createRandomShips","randomFloat","createdShip","store","createContext","Provider","ACTIONS","reducer","state","action","payload","phase","players","player","ai","message","turn","winner","Controller","children","useReducer","dispatch","value","didHit","hittedShipOnBoard","Gameboard","hittedShip","hitRandomPosition","unHittedFields","attackCoordinate","getRandomPosition","updateHitted","isLonelyField","nextCells","nextCellPos","hitNaerbyFieldOfShip","hittedPositions","sort","a","b","attackHorizontally","attackVertically","handlePlayerShipDestroyed","posBeforeHit","posAfterHit","isValidAttack","fieldToHit","checkIfNotOnBoard","revealNearbyCells","checkIfWin","aiTurn","nextTurn","setTimeout","checkIfFatal","playerTurn","CellContainer","styled","div","props","hasWater","Cell","belongsTo","useState","shot","setShot","useContext","generateFlame","className","alt","src","flame","generateWater","onClick","ScoreBoard","cell","GameContainer","GameoverModal","GameoverWindow","ShipSelectionUI","ShipSelectionCell","render","calculateNewPosition","useDrop","accept","canDrop","item","drop","monitor","shipIsOnField","changeNumber","collect","isOver","useDrag","isDragging","drag","ref","style","opacity","backgroundColor","clickedShip","ShipCell","Ship","shipData","number","setNumber","refObject","fontSize","fontWeight","createShip","DNDProvider","DndProvider","backend","HTML5Backend","InfoContainer","SelectionInfo","lightbulb","ShipSelectionWindow","selectionBoard","setSelectionBoard","helpState","setHelpState","active","setActive","useEffect","SelectionCell","shipList","shipType","Console","GameWindow","Fragment","color","messageColor","HeaderContainer","Header","AppContainer","App","GlobalStyle","createGlobalStyle","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e7a445f.chunk.js","sourcesContent":["const GameboardFactory = (ships) => {\n  let board = [];\n  let shipsOnBoard = [];\n\n  const placeShips = (shipArray) => {\n    shipArray.forEach((ship) => placeShip(ship));\n  };\n\n  const placeShip = (ship) => {\n    let coordinates = ship.getPosition();\n    coordinates.forEach((coordinate) => (board[coordinate].hasShip = ship));\n    shipsOnBoard.push(ship);\n  };\n\n  const replaceShip = (ship, newPos) => {\n    let shipToReplace = getShips().find((e) => ship.getId() === e.getId());\n\n    shipToReplace.getPosition().forEach((pos) => (board[pos].hasShip = false));\n    ship.setPosition(newPos);\n    newPos.forEach((coordinate) => (board[coordinate].hasShip = ship));\n  };\n\n  const init = () => {\n    let newBoard = [];\n    for (let i = 0; i < 100; i++) {\n      newBoard.push({ hasShip: false, isHitted: false });\n    }\n    board = newBoard;\n  };\n\n  init();\n\n  let shipCount = typeof ships === \"undefined\" ? 0 : ships.length;\n  let shipsDestroyed = 0;\n  if (shipCount > 0) {\n    placeShips(ships);\n  }\n\n  const getBoard = () => {\n    return board;\n  };\n\n  const getField = (coordinate) => {\n    return board[coordinate];\n  };\n\n  const getShips = () => {\n    return shipsOnBoard;\n  };\n\n  const receiveAttack = (coordinate) => {\n    const ship = board[coordinate].hasShip;\n\n    board[coordinate].isHitted = true;\n    if (ship) {\n      ship.hit(coordinate);\n      if (ship.isSunk()) {\n        shipsDestroyed++;\n      }\n    }\n  };\n\n  const checkIfAllDestroyed = () => {\n    if (shipCount === shipsDestroyed) {\n      return true;\n    }\n  };\n\n  const getShipCount = () => {\n    return shipCount - shipsDestroyed;\n  };\n\n  return {\n    placeShips,\n    placeShip,\n    getBoard,\n    getField,\n    getShips,\n    receiveAttack,\n    checkIfAllDestroyed,\n    replaceShip,\n    getShipCount,\n  };\n};\n\nexport default GameboardFactory;\n","import GameboardFactory from \"./GameboardFactory\";\n\nconst Player = (playerType, shipSelection) => {\n  let type = playerType;\n  let score = 0;\n  let ships = shipSelection;\n  const playerGameboard = GameboardFactory(ships);\n\n  const attack = (board, coordinate) => {\n    if (!board.getField(coordinate).isHitted) {\n      board.receiveAttack(coordinate);\n    }\n  };\n\n  const increaseScore = () => {\n    score++;\n  };\n\n  const getScore = () => {\n    return score;\n  };\n\n  const getGameboard = () => {\n    return playerGameboard;\n  };\n\n  const getShips = () => {\n    return ships;\n  };\n\n  const getType = () => {\n    return type;\n  };\n\n  return { attack, increaseScore, getScore, getGameboard, getShips, getType };\n};\n\nexport default Player;\n","const shipTypes = [\n  {\n    name: \"Carrier\",\n    length: 5,\n    amount: 1,\n  },\n  {\n    name: \"Battleship\",\n    length: 4,\n    amount: 1,\n  },\n  {\n    name: \"Cruiser\",\n    length: 3,\n    amount: 2,\n  },\n  {\n    name: \"Destroyer\",\n    length: 2,\n    amount: 2,\n  },\n];\n\nexport default shipTypes;\n","const createNearbyCoordinates = (pos) => {\n  const getRevTop = (coordinate) => {\n    return [coordinate - 11, coordinate - 10, coordinate - 9];\n  };\n  const getRevLeft = (coordinate) => {\n    return [coordinate - 11, coordinate - 1, coordinate + 9];\n  };\n  const getRevBottom = (coordinate) => {\n    return [coordinate + 9, coordinate + 10, coordinate + 11];\n  };\n  const getRevRight = (coordinate) => {\n    return [coordinate - 9, coordinate + 1, coordinate + 11];\n  };\n\n  const isTop = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const isLeft = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90];\n  const isBot = [90, 91, 92, 93, 94, 95, 96, 97, 98, 99];\n  const isRight = [9, 19, 29, 39, 49, 59, 69, 79, 89, 99];\n\n  const getType = (coordinate) => {\n    let cellType = [];\n    if (isTop.includes(coordinate)) {\n      cellType.push(\"top\");\n    }\n    if (isLeft.includes(coordinate)) {\n      cellType.push(\"left\");\n    }\n    if (isBot.includes(coordinate)) {\n      cellType.push(\"bot\");\n    }\n    if (isRight.includes(coordinate)) {\n      cellType.push(\"right\");\n    }\n    return cellType;\n  };\n\n  let nearbyCoordinates = [];\n\n  pos.forEach((coordinate) => {\n    let type = getType(coordinate);\n    nearbyCoordinates.push(\n      ...getRevTop(coordinate),\n      ...getRevLeft(coordinate),\n      ...getRevRight(coordinate),\n      ...getRevBottom(coordinate)\n    );\n    if (type.includes(\"top\")) {\n      nearbyCoordinates = nearbyCoordinates.filter(\n        (e) => !getRevTop(coordinate).includes(e)\n      );\n    }\n    if (type.includes(\"bot\")) {\n      nearbyCoordinates = nearbyCoordinates.filter(\n        (e) => !getRevBottom(coordinate).includes(e)\n      );\n    }\n    if (type.includes(\"left\")) {\n      nearbyCoordinates = nearbyCoordinates.filter(\n        (e) => !getRevLeft(coordinate).includes(e)\n      );\n    }\n    if (type.includes(\"right\")) {\n      nearbyCoordinates = nearbyCoordinates.filter(\n        (e) => !getRevRight(coordinate).includes(e)\n      );\n    }\n  });\n\n  const finalArray = [];\n  nearbyCoordinates.forEach((e) => {\n    if (finalArray.includes(e) || pos.includes(e)) {\n      return;\n    }\n    finalArray.push(e);\n  });\n\n  return finalArray;\n};\n\nexport default createNearbyCoordinates;\n","const isNearbyField = (coordinate, board, ship) => {\n  let array = [];\n\n  board.getShips().forEach((e) => array.push(...e.getNearbyCoordinates()));\n\n  if (ship !== undefined && ship.getPosition().length !== 0) {\n    let doubleNearby = array.filter(\n      (pos, index) => array.indexOf(pos) !== index\n    );\n    array = array\n      .filter((e) => !ship.getNearbyCoordinates().includes(e))\n      .concat(doubleNearby);\n  }\n\n  if (array.includes(coordinate)) {\n    return true;\n  }\n  return false;\n};\nexport default isNearbyField;\n","import GameboardFactory from \"../factories/GameboardFactory\";\nimport isNearbyField from \"./isNearbyField\";\n\nconst isValidPosition = (pos, board, alignment, ship) => {\n  let controlBoard = GameboardFactory();\n\n  controlBoard.placeShips(board.getShips());\n\n  if (ship !== undefined) {\n    ship\n      .getPosition()\n      .forEach((coord) => (controlBoard.getField(coord).hasShip = false));\n  }\n\n  if (\n    inBreak(pos, alignment) ||\n    onNearbyField(pos, board, ship) ||\n    hasShipOnPosition(pos, controlBoard)\n  ) {\n    return false;\n  }\n  return true;\n};\n\nconst hasShipOnPosition = (pos, board) => {\n  const hasShip = pos.some((coord) => board.getField(coord).hasShip);\n  return hasShip;\n};\n\nconst inBreak = (pos, alignment) => {\n  if (alignment === \"horizontal\") {\n    let x = parseInt(pos[0] / 10, 10) * 10;\n    let y = parseInt(pos[pos.length - 1] / 10, 10) * 10;\n    if (y > x) {\n      return true;\n    }\n  }\n  if (pos[0] < 0 || pos[pos.length - 1] > 99) {\n    return true;\n  }\n  return false;\n};\n\nconst onNearbyField = (pos, board, ship) => {\n  if (pos.some((e) => isNearbyField(e, board, ship))) {\n    return true;\n  }\n  return false;\n};\n\nexport default isValidPosition;\n","import createNearbyCoordinates from \"../helper/createNearbyCoordinates\";\nimport isValidPosition from \"../helper/isValidPosition\";\n\nconst ShipFactory = (name, pos, shipLength, _id) => {\n  const shipName = name;\n  let position = pos;\n  let alignment = \"horizontal\";\n  let length = shipLength;\n  let nearbyCoordinates = createNearbyCoordinates(pos);\n  let hitted = [];\n  let id = _id;\n\n  const hit = (field) => {\n    hitted.push(field);\n  };\n\n  const isSunk = () => {\n    return position.every((pos) => hitted.includes(pos));\n  };\n\n  const getHits = () => {\n    return hitted;\n  };\n\n  const getPosition = () => {\n    return position;\n  };\n\n  const setPosition = (coordinatesArray) => {\n    position = coordinatesArray;\n    nearbyCoordinates = createNearbyCoordinates(coordinatesArray);\n  };\n\n  const getName = () => {\n    return shipName;\n  };\n\n  const getNearbyCoordinates = () => {\n    return nearbyCoordinates;\n  };\n\n  const setNearbyCoordinates = (coordinates) => {\n    nearbyCoordinates = coordinates;\n  };\n\n  const getLength = () => {\n    return length;\n  };\n\n  const getId = () => {\n    return id;\n  };\n\n  const getAlignment = () => {\n    return alignment;\n  };\n\n  function rotate(board) {\n    const fixedPos = position[0];\n    let newPos;\n\n    if (alignment === \"horizontal\") {\n      newPos = position.map((pos, index) => fixedPos + 10 * index);\n      alignment = \"vertical\";\n    } else {\n      newPos = position.map((pos, index) => fixedPos + index);\n      alignment = \"horizontal\";\n    }\n    if (isValidPosition(newPos, board, alignment, this)) {\n      board.replaceShip(this, newPos);\n      nearbyCoordinates = createNearbyCoordinates(position);\n    } else {\n      if (alignment === \"horizontal\") {\n        alignment = \"vertical\";\n      } else {\n        alignment = \"horizontal\";\n      }\n    }\n  }\n\n  return {\n    hit,\n    isSunk,\n    getHits,\n    getPosition,\n    setPosition,\n    getName,\n    getNearbyCoordinates,\n    setNearbyCoordinates,\n    getLength,\n    getId,\n    rotate,\n    getAlignment,\n  };\n};\n\nexport default ShipFactory;\n","import shipTypes from \"../Data/shipTypes\";\nimport ShipFactory from \"../factories/ShipFactory\";\nimport GameboardFactory from \"../factories/GameboardFactory\";\nimport isValidPosition from \"./isValidPosition\";\n\nconst createRandomShips = () => {\n  const shipArray = [];\n  const board = GameboardFactory();\n  shipTypes.forEach((ship) => {\n    for (let i = 0; i < ship.amount; i++) {\n      const randomFloat = Math.random();\n      const createdShip = ShipFactory(\n        ship.name,\n        createRandomPos(ship.length, board),\n        ship.length,\n        Math.random() * 1000\n      );\n      board.placeShip(createdShip);\n      if (randomFloat > 0.5) {\n        createdShip.rotate(board);\n      }\n      shipArray.push(createdShip);\n    }\n  });\n  return shipArray;\n};\n\nconst createRandomPos = (length, board) => {\n  const randomNumber = Math.floor(Math.random() * 100);\n  let pos = [randomNumber];\n  for (let i = 1; i < length; i++) {\n    pos.push(randomNumber + i);\n  }\n\n  if (!isValidPosition(pos, board, \"horizontal\", undefined)) {\n    pos = createRandomPos(length, board);\n  }\n\n  return pos;\n};\n\nexport default createRandomShips;\n","import Player from \"./factories/Player\";\nimport React, { createContext, useReducer } from \"react\";\nimport createRandomShips from \"./helper/createRandomShips\";\n\nconst store = createContext();\nconst { Provider } = store;\n\nconst ACTIONS = {\n  SET_PLAYERS: \"Set players\",\n  SET_MESSAGE: \"Set message\",\n  RESET_Message: \"Reset message\",\n  RESTART_GAME: \"Restart game\",\n  CHANGE_PHASE: \"Change game phase\",\n  SET_WINNER: \"set the winner of the game\",\n  SET_TURN: \"set who can play this turn\",\n};\n\nconst reducer = (state, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case ACTIONS.SET_PLAYERS: {\n      return {\n        ...state,\n        phase: \"Play\",\n        players: {\n          player: Player(\"Human\", [...payload]),\n          ai: Player(\"AI\", createRandomShips()),\n        },\n      };\n    }\n    case ACTIONS.SET_MESSAGE: {\n      return {\n        ...state,\n        message: payload,\n      };\n    }\n    case ACTIONS.RESET_Message: {\n      return {\n        ...state,\n        message: \"\",\n      };\n    }\n    case ACTIONS.RESTART_GAME: {\n      return {\n        phase: \"Selection\",\n        players: {\n          player: \"\",\n          ai: \"\",\n        },\n        turn: \"player\",\n        message: \"\",\n        winner: \"\",\n      };\n    }\n    case ACTIONS.CHANGE_PHASE: {\n      return {\n        ...state,\n        phase: payload,\n      };\n    }\n    case ACTIONS.SET_WINNER: {\n      return {\n        ...state,\n        winner: payload,\n      };\n    }\n    case ACTIONS.SET_TURN: {\n      return {\n        ...state,\n        turn: payload,\n        message: \"-- \" + payload + \"'s turn --\",\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nconst Controller = ({ children }) => {\n  const initialState = {\n    phase: \"Selection\",\n    players: {},\n    turn: \"player\",\n    message: \"\",\n    winner: \"\",\n  };\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return <Provider value={{ state, dispatch }}>{children}</Provider>;\n};\n\nexport default Controller;\nexport { store, ACTIONS };\n","import { ACTIONS } from \"../Controller\";\nimport nextTurn from \"./nextTurn\";\n\nlet didHit = false;\n\nconst aiTurn = (player, ai, dispatch) => {\n  const Gameboard = player.getGameboard();\n\n  if (hittedShipOnBoard(Gameboard)) {\n    hitNaerbyFieldOfShip(Gameboard, dispatch);\n  } else {\n    hitRandomPosition(Gameboard, dispatch);\n  }\n\n  if (checkIfWin(Gameboard, dispatch)) {\n    return;\n  } else {\n    nextTurn(didHit ? \"ai\" : \"player\", player, ai, dispatch);\n  }\n};\n\nconst hittedShipOnBoard = (Gameboard) => {\n  const hittedShip = Gameboard.getShips().find(\n    (ship) => ship.getHits().length > 0 && !ship.isSunk()\n  );\n\n  if (hittedShip) {\n    return hittedShip;\n  } else {\n    return false;\n  }\n};\n\nconst hitRandomPosition = (Gameboard, dispatch) => {\n  let unHittedFields = [];\n  Gameboard.getBoard().forEach((field, index) => {\n    if (field.isHitted === false) {\n      unHittedFields.push(index);\n    }\n  });\n  const attackCoordinate = getRandomPosition(Gameboard, unHittedFields);\n  Gameboard.receiveAttack(attackCoordinate);\n  updateHitted(Gameboard, attackCoordinate, dispatch);\n};\n\nconst getRandomPosition = (Gameboard, unHittedFields) => {\n  let randomNumber = Math.floor(Math.random() * (unHittedFields.length - 1));\n  let pos = unHittedFields[randomNumber];\n  if (isLonelyField(Gameboard, unHittedFields, pos)) {\n    return getRandomPosition(Gameboard, unHittedFields);\n  }\n  return pos;\n};\n\nconst isLonelyField = (Gameboard, unHittedFields, pos) => {\n  let nextCells = [-10, -1, +1, +10];\n  if (pos < 10) {\n    nextCells = [-1, +1, +10];\n  }\n  if (pos > 89) {\n    nextCells = [-10, -1, +1];\n  }\n  if (pos === 0) {\n    nextCells = [+1, +10];\n  }\n  if (pos === 99) {\n    nextCells = [-1, -10];\n  }\n\n  if (\n    nextCells.every(\n      (nextCellPos) => Gameboard.getField(pos + nextCellPos).isHitted\n    )\n  ) {\n    return true;\n  }\n  return false;\n};\n\nconst hitNaerbyFieldOfShip = (Gameboard, dispatch) => {\n  const hittedShip = hittedShipOnBoard(Gameboard);\n  const hittedPositions = hittedShip.getHits().sort((a, b) => a - b);\n  const alignment = hittedShip.getAlignment();\n  if (alignment === \"horizontal\") {\n    attackHorizontally(Gameboard, hittedPositions, alignment, dispatch);\n  } else {\n    attackVertically(Gameboard, hittedPositions, alignment, dispatch);\n  }\n  handlePlayerShipDestroyed(Gameboard, hittedShip, dispatch);\n};\n\nconst attackHorizontally = (\n  Gameboard,\n  hittedPositions,\n  alignment,\n  dispatch\n) => {\n  const posBeforeHit = hittedPositions[0] - 1;\n  const posAfterHit = hittedPositions[hittedPositions.length - 1] + 1;\n  if (isValidAttack(posBeforeHit, Gameboard, alignment)) {\n    Gameboard.receiveAttack(posBeforeHit);\n    updateHitted(Gameboard, posBeforeHit, dispatch);\n  } else {\n    Gameboard.receiveAttack(posAfterHit);\n    updateHitted(Gameboard, posAfterHit, dispatch);\n  }\n};\n\nconst attackVertically = (Gameboard, hittedPositions, alignment, dispatch) => {\n  const posBeforeHit = hittedPositions[0] - 10;\n  const posAfterHit = hittedPositions[hittedPositions.length - 1] + 10;\n\n  if (isValidAttack(posBeforeHit, Gameboard, alignment)) {\n    Gameboard.receiveAttack(posBeforeHit);\n    updateHitted(Gameboard, posBeforeHit, dispatch);\n  } else {\n    Gameboard.receiveAttack(posAfterHit);\n    updateHitted(Gameboard, posAfterHit, dispatch);\n  }\n};\n\nconst isValidAttack = (coordinate, Gameboard, alignment) => {\n  const fieldToHit = Gameboard.getField(coordinate);\n\n  if (\n    checkIfNotOnBoard(coordinate) ||\n    fieldToHit.isHitted ||\n    inBreak(coordinate, alignment)\n  ) {\n    return false;\n  }\n  return true;\n};\n\nconst checkIfNotOnBoard = (coordinate) => {\n  if (coordinate < 0 || coordinate > 99) {\n    return true;\n  }\n  return false;\n};\n\nconst inBreak = (coordinate, alignment) => {\n  if (alignment === \"horizontal\") {\n    let x = parseInt(coordinate / 10, 10) * 10;\n    let y = parseInt((coordinate + 1) / 10, 10) * 10;\n    if (y > x) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst handlePlayerShipDestroyed = (Gameboard, ship, dispatch) => {\n  if (ship.isSunk()) {\n    revealNearbyCells(Gameboard, ship.getPosition()[0]);\n    dispatch({\n      type: ACTIONS.SET_MESSAGE,\n      payload: \"Our Ship is no more Captain!\",\n    });\n  }\n};\n\nconst revealNearbyCells = (board, coordinate) => {\n  const ship = board.getField(coordinate).hasShip;\n  ship.getNearbyCoordinates().forEach((e) => board.receiveAttack(e));\n};\n\nconst updateHitted = (Gameboard, field, dispatch) => {\n  if (Gameboard.getField(field).hasShip) {\n    didHit = true;\n    dispatch({\n      type: ACTIONS.SET_MESSAGE,\n      payload: \"Enemy hitted your Ship!\",\n    });\n  } else {\n    didHit = false;\n    dispatch({\n      type: ACTIONS.SET_MESSAGE,\n      payload: \"Enemy missed! This is our chance Captain!\",\n    });\n  }\n};\n\nconst checkIfWin = (Gameboard, dispatch) => {\n  if (Gameboard.checkIfAllDestroyed()) {\n    dispatch({\n      type: ACTIONS.CHANGE_PHASE,\n      payload: \"End\",\n    });\n    dispatch({\n      type: ACTIONS.SET_WINNER,\n      payload: \"Computer\",\n    });\n    return true;\n  }\n};\n\nexport default aiTurn;\n","import { ACTIONS } from \"../Controller\";\nimport aiTurn from \"./aiTurn\";\n\nconst nextTurn = (nextTurn, player, ai, dispatch) => {\n  if (nextTurn === \"ai\") {\n    dispatch({\n      type: ACTIONS.SET_TURN,\n      payload: \"ai\",\n    });\n    setTimeout(() => aiTurn(player, ai, dispatch), 1250);\n  } else {\n    dispatch({\n      type: ACTIONS.SET_TURN,\n      payload: \"player\",\n    });\n  }\n};\n\nexport default nextTurn;\n","import { ACTIONS } from \"../Controller\";\nimport nextTurn from \"./nextTurn\";\n\nconst playerTurn = (player, ai, coordinate, dispatch) => {\n  const Gameboard = ai.getGameboard();\n  Gameboard.receiveAttack(coordinate);\n\n  if (Gameboard.getField(coordinate).hasShip) {\n    checkIfFatal(Gameboard, coordinate, dispatch);\n    checkIfWin(Gameboard, player, dispatch);\n    nextTurn(\"player\", player, ai, dispatch);\n  } else {\n    nextTurn(\"ai\", player, ai, dispatch);\n  }\n};\n\nconst checkIfFatal = (board, coordinate, dispatch) => {\n  if (board.getField(coordinate).hasShip.isSunk()) {\n    dispatch({\n      type: ACTIONS.SET_MESSAGE,\n      payload: \"Enemy's ship destroyed\",\n    });\n    revealNearbyCells(board, coordinate);\n  }\n};\n\nconst checkIfWin = (board, player, dispatch) => {\n  if (board.checkIfAllDestroyed()) {\n    dispatch({\n      type: ACTIONS.CHANGE_PHASE,\n      payload: \"End\",\n    });\n    dispatch({\n      type: ACTIONS.SET_WINNER,\n      payload: \"player\",\n    });\n  }\n};\n\nconst revealNearbyCells = (board, coordinate) => {\n  const ship = board.getField(coordinate).hasShip;\n  ship.getNearbyCoordinates().forEach((e) => board.receiveAttack(e));\n};\n\nexport default playerTurn;\n","import styled from \"styled-components\";\n\nexport const CellContainer = styled.div`\n  width: 50px;\n  height: 50px;\n  border: 1px solid;\n  background-color: ${(props) =>\n    props.hasShip ? \"#f02d3a\" : props.hasWater ? \"#62b4cf\" : \"white\"};\n  font-size: 50px;\n  text-align: center;\n\n  .flame {\n    width: 50px;\n    height: 50px;\n    animation: grow 1s;\n  }\n  @keyframes grow {\n    0% {\n      transform: scale(0);\n    }\n    75% {\n      transform: scale(1.25);\n    }\n\n    100% {\n      transform: scale(1);\n    }\n  }\n\n  .missed {\n    animation: shake 0.5s;\n  }\n\n  @keyframes shake {\n    10%,\n    90% {\n      transform: translate3d(-0.5px, 0, 0);\n    }\n\n    20%,\n    80% {\n      transform: translate3d(1px, 0, 0);\n    }\n\n    30%,\n    50%,\n    70% {\n      transform: translate3d(-2px, 0, 0);\n    }\n\n    40%,\n    60% {\n      transform: translate3d(2px, 0, 0);\n    }\n  }\n\n  @media (max-width: 1135px) {\n    width: 25px;\n    height: 25px;\n    font-size: 25px;\n\n    .flame {\n      width: 25px;\n      height: 25px;\n    }\n  }\n`;\n","export default __webpack_public_path__ + \"static/media/flame.56be189b.png\";","import React, { useState, useContext } from \"react\";\nimport playerTurn from \"../helper/playerTurn\";\nimport { store, ACTIONS } from \"../Controller\";\nimport { CellContainer } from \"./style/CellContainer\";\nimport flame from \"../imgs/flame.png\";\n\nconst Cell = ({ field, coordinates, belongsTo }) => {\n  const [shot, setShot] = useState(false);\n  const { state, dispatch } = useContext(store);\n  const player = state.players.player;\n  const ai = state.players.ai;\n\n  const handleShot = () => {\n    if (shot === false) {\n      dispatch({ type: ACTIONS.RESET_Message });\n      playerTurn(player, ai, coordinates, dispatch);\n      setShot(true);\n    }\n  };\n\n  const generateFlame = () => {\n    return <img className=\"flame\" alt=\"X\" src={flame}></img>;\n  };\n  const generateWater = () => {\n    return <div className=\"missed\">•</div>;\n  };\n\n  if (belongsTo === \"Human\") {\n    return (\n      <CellContainer hasShip={field.hasShip} hasWater>\n        {field.isHitted && (\n          <div>{field.hasShip ? generateFlame() : generateWater()}</div>\n        )}\n      </CellContainer>\n    );\n  } else {\n    return (\n      <CellContainer\n        hasShip={field.isHitted && field.hasShip}\n        hasWater={!field.hasShip && field.isHitted}\n        onClick={state.turn === \"player\" ? handleShot : undefined}\n        className={`cell`}\n      >\n        {field.isHitted && (\n          <div>{field.hasShip ? generateFlame() : generateWater()}</div>\n        )}\n      </CellContainer>\n    );\n  }\n};\n\nexport default Cell;\n","import styled from \"styled-components\";\n\nexport const ScoreBoard = styled.div`\n  width: 100%;\n  margin-top: 5px;\n  font-size: 24px;\n  color: #f4a261;\n  text-align: center;\n  font-weight: bold;\n\n  @media (max-width: 650px){\n    font-size: 16px;\n  }\n`;\n","import React from \"react\";\nimport Cell from \"./Cell\";\nimport { ScoreBoard } from \"./style/ScoreBoard\";\n\nconst Gameboard = ({ player }) => {\n  const Gameboard = player.getGameboard();\n  const createGameboard = () => {\n    const board = Gameboard.getBoard().map((cell, index) => {\n      return (\n        <Cell\n          key={index}\n          field={cell}\n          coordinates={index}\n          belongsTo={player.getType()}\n        />\n      );\n    });\n\n    return board;\n  };\n\n  return (\n    <div className=\"gameBoard\">\n      {createGameboard()}\n      <ScoreBoard>{Gameboard.getShipCount()} ships left</ScoreBoard>\n    </div>\n  );\n};\n\nexport default Gameboard;\n","import styled from \"styled-components\";\n\nexport const GameContainer = styled.div`\n  position: relative;\n  padding: 50px;\n  background-color: #006494;\n\n  .gameboardsContainer {\n    display: flex;\n    flex-direction: row;\n    width: 100%;\n    justify-content: space-around;\n  }\n\n  .gameBoard {\n    width: 500px;\n    height: 500px;\n    border: 1px solid;\n    display: flex;\n    flex-wrap: wrap;\n    box-sizing: content-box;\n    border: 3px solid black;\n  }\n\n  .button {\n    font-size: 20px;\n    background-color: #e67a00;\n    font-weight: bold;\n    height: 50px;\n    border: 3px solid black;\n\n    &:hover {\n      background-color: #ff8800;\n    }\n  }\n\n  @media (max-width: 1135px) {\n    .gameBoard {\n      width: 250px;\n      height: 250px;\n    }\n  }\n\n  @media (max-width: 650px) {\n\n    .gameboardsContainer {\n      flex-direction: column;\n      align-items: center;\n    }\n\n    .gameBoard {\n      margin-bottom: 50px;\n    }\n  }\n`;\n","import styled from \"styled-components\";\n\nconst GameoverModal = styled.div`\n  width: 100%;\n  height: 100vh;\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  font-size: 50px;\n  color: white;\n  background-color: #006494;\n\n  button {\n    margin-top: 20px;\n    width: 200px;\n    height: 50px;\n  }\n\n  @media (max-width: 650px){\n    font-size: 26px;\n  }\n`;\n\nexport default GameoverModal;\n","import React from \"react\";\nimport GameoverModal from \"./style/GameoverModal\";\nimport { ACTIONS } from \"../Controller\";\n\nconst GameoverWindow = ({ winner, dispatch }) => {\n  const restartGame = () => {\n    dispatch({\n      type: ACTIONS.RESTART_GAME,\n    });\n  };\n\n  return (\n    <GameoverModal>\n      <h2>{winner} wins</h2>\n      <button className=\"button\" onClick={restartGame}>\n        Play again!\n      </button>\n    </GameoverModal>\n  );\n};\n\nexport default GameoverWindow;\n","import styled from \"styled-components\";\n\nconst ShipSelectionUI = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  .shipList {\n    margin-left: 50px;\n    max-width: 200px;\n  }\n\n  .ship {\n    display: flex;\n    flex-direction: row;\n    margin: 20px;\n  }\n\n  .moveable {\n    cursor: move;\n  }\n\n  .isOver {\n    position: \"absolute\";\n    top: 0;\n    left: 0;\n    height: \"100%\";\n    width: \"100%\";\n    z-index: 1;\n    opacity: 0.5;\n    background-color: \"yellow\";\n  }\n\n  .mainUI {\n    display: flex;\n    justify-content: center;\n  }\n\n  .buttonContainer {\n    margin: 0 auto;\n    margin-top: 50px;\n    display: flex;\n  }\n\n  .randomButton {\n    width: 150px;\n  }\n\n  .playButton {\n    margin-left: 50px;\n    width: 400px;\n    height: 50px;\n    font-weight: bold;\n\n    &.deactivated {\n      background-color: grey;\n    }\n\n    &.active {\n      &:hover {\n        background-color: #ff8800;\n      }\n    }\n\n    &:hover {\n      background-color: none;\n    }\n  }\n\n  @media (max-width: 660px){\n    .mainUI{\n      flex-direction: column;\n    }\n\n    .playButton{\n      width: 200px;\n      margin-left: 0px;\n      margin-top: 10px; \n    }\n\n    .randomButton{\n      width: 200px;\n    }\n\n    .buttonContainer {\n      flex-direction: column;\n    }\n  }\n`;\n\nexport default ShipSelectionUI;\n","import React from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport isValidPosition from \"../helper/isValidPosition\";\nimport isNearbyField from \"../helper/isNearbyField\";\nimport { useDrag } from \"react-dnd\";\nimport { CellContainer } from \"./style/CellContainer\";\n\nconst ShipSelectionCell = ({ field, coordinates, board, render }) => {\n  const calculateNewPosition = (alignment, length) => {\n    let pos = [];\n    if (alignment === \"horizontal\") {\n      for (let i = 0; i < length; i++) {\n        pos.push(coordinates + i);\n      }\n    } else {\n      for (let i = 0; i < length; i++) {\n        pos.push(coordinates + i * 10);\n      }\n    }\n\n    return pos;\n  };\n\n  const [{ isOver, canDrop }, drop] = useDrop({\n    accept: [\"ship\", \"cell\"],\n    canDrop: (item) => {\n      let pos = calculateNewPosition(\n        item.ship.getAlignment(),\n        item.ship.getLength()\n      );\n\n      return isValidPosition(pos, board, item.ship.getAlignment(), item.ship);\n    },\n    drop: (item, monitor) => {\n      let pos = calculateNewPosition(\n        item.ship.getAlignment(),\n        item.ship.getLength()\n      );\n      if (item.shipIsOnField !== undefined) {\n        board.replaceShip(item.ship, pos);\n      } else {\n        item.ship.setPosition(pos);\n        board.placeShip(item.ship);\n      }\n\n      render();\n      if (item.changeNumber) {\n        item.changeNumber();\n      }\n    },\n    collect: (monitor) => ({\n      isOver: !!monitor.isOver(),\n      canDrop: !!monitor.canDrop(),\n    }),\n  });\n\n  const [{ isDragging }, drag] = useDrag({\n    type: \"cell\",\n    item: {\n      ship: board.getField(coordinates).hasShip,\n      shipIsOnField: true,\n    },\n    collect: (monitor) => ({\n      isDragging: !!monitor.isDragging(),\n    }),\n  });\n\n  let ref = drop;\n\n  if (board.getField(coordinates).hasShip) {\n    ref = drag;\n  }\n\n  const rotateShip = () => {\n    let clickedShip = board.getField(coordinates).hasShip;\n    clickedShip.rotate(board);\n    board.replaceShip(clickedShip, clickedShip.getPosition());\n    render();\n  };\n\n  return (\n    <CellContainer\n      ref={ref}\n      hasShip={field.hasShip}\n      hasWater={!field.hasShip}\n      isOver={isOver}\n      style={{\n        opacity: isDragging ? 0.5 : 1,\n        backgroundColor: !canDrop ? \"\" : isOver ? \"green\" : \"\",\n      }}\n      onClick={field.hasShip ? rotateShip : undefined}\n    >\n      {isNearbyField(coordinates, board) && <div>•</div>}\n    </CellContainer>\n  );\n};\n\nexport default ShipSelectionCell;\n","import React from \"react\";\nimport { CellContainer } from \"./style/CellContainer\";\n\nconst ShipCell = () => {\n  return <CellContainer hasShip></CellContainer>;\n};\n\nexport default ShipCell;\n","import React, { useState } from \"react\";\nimport ShipCell from \"./ShipCell\";\nimport { useDrag } from \"react-dnd\";\n\nconst Ship = ({ shipArray, shipData, Gameboard }) => {\n  const [number, setNumber] = useState(shipData.amount);\n\n  const changeNumber = () => {\n    setNumber(number - 1);\n  };\n\n  const [{ isDragging }, drag] = useDrag({\n    type: \"ship\",\n    item: {\n      ship: shipArray[number - 1],\n      changeNumber: changeNumber,\n    },\n    collect: (monitor) => ({\n      isDragging: !!monitor.isDragging(),\n    }),\n  });\n\n  let refObject = drag;\n\n  if (number < 1 || Gameboard.getShips().length === 6) {\n    refObject = undefined;\n  }\n\n  const createShip = () => {\n    let x = [];\n\n    for (let i = 0; i < shipArray[0].getLength(); i++) {\n      x.push(<ShipCell key={i} />);\n    }\n\n    return x;\n  };\n\n  return (\n    <div>\n      <div>{number}</div>\n      <div\n        ref={refObject}\n        style={{\n          opacity: isDragging ? 0.5 : 1,\n          fontSize: 25,\n          fontWeight: \"bold\",\n        }}\n        className={`ship ${number > 0 ? \"moveable\" : \"\"}`}\n      >\n        {createShip()}\n      </div>\n    </div>\n  );\n};\n\nexport default Ship;\n","import React from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\n\nconst DNDProvider = ({ children }) => {\n  return <DndProvider backend={HTML5Backend}>{children}</DndProvider>;\n};\nexport default DNDProvider;\n","import styled from \"styled-components\";\n\nexport const InfoContainer = styled.div`\n  display: flex;\n  color: #ff8800;\n  font-weight: bold;\n  font-size: 20px;\n  margin-top: 50px;\n  margin-left: 20px;\n  img {\n    width: 50px;\n    height: 50px;\n    margin-right: 10px;\n  }\n\n   @media (max-width:1140px){\n     font-size: 12px;\n\n     img {\n       width: 25px;\n       height: 25px;\n     }\n   }\n`;\n","export default __webpack_public_path__ + \"static/media/light-bulb.27cc7f2e.png\";","import React from \"react\";\nimport { InfoContainer } from \"./style/InfoContainer\";\n\nimport lightbulb from \"../imgs/light-bulb.png\";\n\nconst SelectionInfo = () => {\n  return (\n    <InfoContainer>\n      <div>\n        <img src={lightbulb} alt=\"\"></img>\n      </div>\n      <div>\n        <p> Drag&Drop the ships on the right position</p>\n        <p>Click on the ship when placed to rotate</p>\n      </div>\n    </InfoContainer>\n  );\n};\n\nexport default SelectionInfo;\n","import React, { useState, useContext, useEffect } from \"react\";\nimport GameboardFactory from \"../factories/GameboardFactory\";\nimport ShipSelectionUI from \"./style/ShipSelectionUI\";\nimport SelectionCell from \"./SelectionCell\";\nimport shipList from \"../Data/shipTypes\";\nimport Ship from \"./Ship\";\nimport ShipFactory from \"../factories/ShipFactory\";\nimport DNDProvider from \"./DNDProvider\";\nimport { store, ACTIONS } from \"../Controller\";\nimport createRandomShips from \"../helper/createRandomShips\";\nimport SelectionInfo from \"./SelectionInfo\";\nconst ShipSelectionWindow = () => {\n  const { dispatch } = useContext(store);\n  const [selectionBoard, setSelectionBoard] = useState(GameboardFactory());\n  const [helpState, setHelpState] = useState(0);\n  const [active, setActive] = useState(false);\n\n  const render = (newBoard) => {\n    setHelpState(helpState + 1);\n  };\n\n  const createSelectionGameboard = () => {\n    return selectionBoard.getBoard().map((cell, index) => {\n      return (\n        <SelectionCell\n          key={index}\n          field={cell}\n          coordinates={index}\n          board={selectionBoard}\n          render={render}\n        />\n      );\n    });\n  };\n\n  const createShipList = () => {\n    return shipList.map((shipType, index) => {\n      let shipArray = [];\n\n      for (let i = 0; i < shipType.amount; i++) {\n        shipArray.push(\n          ShipFactory(shipType.name, [], shipType.length, index * 10 + i)\n        );\n      }\n\n      return (\n        <Ship\n          key={index}\n          shipArray={shipArray}\n          shipData={shipType}\n          Gameboard={selectionBoard}\n        ></Ship>\n      );\n    });\n  };\n\n  const startGame = () => {\n    dispatch({\n      type: ACTIONS.SET_PLAYERS,\n      payload: selectionBoard.getShips(),\n    });\n  };\n\n  const assignRandomShips = () => {\n    setSelectionBoard(GameboardFactory(createRandomShips()));\n    setHelpState(helpState + 1);\n  };\n\n  useEffect(() => {\n    if (selectionBoard.getShips().length === 6) {\n      setActive(true);\n    }\n  }, [selectionBoard.getShips().length]);\n\n  return (\n    <DNDProvider>\n      <ShipSelectionUI>\n        <div className=\"mainUI\">\n          <div className=\"gameBoard\">{createSelectionGameboard()}</div>\n          <div>\n            <div className=\"shipList\">{createShipList()}</div>\n            <SelectionInfo />\n          </div>\n        </div>\n        <div className=\"buttonContainer\">\n          <button className=\" button randomButton\" onClick={assignRandomShips}>\n            Random\n          </button>\n          <button\n            onClick={active ? startGame : undefined}\n            className={`button playButton ${active ? \"active\" : \"deactivated\"}`}\n          >\n            Play\n          </button>\n        </div>\n      </ShipSelectionUI>\n    </DNDProvider>\n  );\n};\n\nexport default ShipSelectionWindow;\n","import styled from \"styled-components\";\n\nexport const Console = styled.div`\n  margin: 0 auto;\n  width: fit-content;\n  min-height: 40px;\n  text-align: center;\n  color: #f4a261;\n  font-size: 32px;\n  font-weight: bold;\n  text-transform: capitalize;\n  border-top: 4px solid black;\n  border-bottom: 4px solid black;\n  margin-top: 50px;\n\n  @media (max-width: 650px){\n    font-size: 24px;\n    margin-top: 20px;\n  }\n`;\n","import Gameboard from \"./Gameboard\";\nimport React, { useContext } from \"react\";\nimport { store } from \"../Controller\";\nimport { GameContainer } from \"../components/style/GameContainer\";\nimport GameoverWindow from \"./GameoverWindow\";\nimport ShipSelectionWindow from \"./ShipSelectionWindow\";\nimport { Console } from \"./style/Console\";\n\nconst GameWindow = () => {\n  const { state, dispatch } = useContext(store);\n\n  return (\n    <div>\n      <GameContainer>\n        {state.phase === \"Selection\" && <ShipSelectionWindow />}\n        {state.phase === \"Play\" && (\n          <React.Fragment>\n            <div className=\"gameboardsContainer\">\n              <Gameboard player={state.players.player} />\n              <Gameboard player={state.players.ai} />\n            </div>\n            <Console color={state.messageColor}>{state.message}</Console>\n          </React.Fragment>\n        )}\n        {state.phase === \"End\" && (\n          <GameoverWindow winner={state.winner} dispatch={dispatch} />\n        )}\n      </GameContainer>\n    </div>\n  );\n};\n\nexport default GameWindow;\n","import styled from \"styled-components\";\n\nexport const HeaderContainer = styled.div`\n  background-color: #006494;\n  h1 {\n    font-size: 124px;\n    text-align: center;\n    color: #f4a261;\n    text-transform: uppercase;\n  }\n\n  @media (max-width: 1100px){\n    h1 {\n      font-size: 62px;\n    }\n  }\n\n  @media (max-width: 600px){\n    h1 {\n      font-size: 36px;\n    }\n  }\n`;\n","import React from \"react\";\nimport { HeaderContainer } from \"./style/HeaderContainer\";\n\nconst Header = () => {\n  return (\n    <HeaderContainer>\n      <h1>Battleships</h1>\n    </HeaderContainer>\n  );\n};\n\nexport default Header;\n","import styled from \"styled-components\";\n\nexport const AppContainer = styled.div`\n  background-color: #006494;\n  height: 100vh;\n`;\n","import GameWindow from \"./components/GameWindow\";\nimport Header from \"./components/Header\";\nimport { AppContainer } from \"./components/style/AppContainer\";\nimport Controller from \"./Controller\";\n\nfunction App() {\n  return (\n    <AppContainer>\n      <Controller>\n        <Header />\n        <GameWindow />\n      </Controller>\n    </AppContainer>\n  );\n}\n\nexport default App;\n","import { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Abril+Fatface&family=Roboto&display=swap');;\n  * {\n    padding: 0px;\n    margin: 0px;\n    box-sizing: border-box;\n    font-family: \"Roboto\", sans-serif ;\n  }\n  \n\n  h1,h2 {\n    font-family: \"Abril Fatface\"\n  }\n\n`;\n\nexport default GlobalStyle;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport GlobalStyle from \"./components/style/GlobalStyle\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}